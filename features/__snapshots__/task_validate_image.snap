
[Non strict with failures:report - 1]
components:
- containerImage: ${REGISTRY}/acceptance/does-not-exist
  name: ""
  success: false
  violations:
  - metadata:
      code: builtin.image.accessible
      description: The image URL is available and accessible on a public registry.
      title: Image URL is accessible
    msg: 'Image URL is not accessible: HEAD http://${REGISTRY}/v2/acceptance/does-not-exist/manifests/latest:
      unexpected status code 404 Not Found (HEAD responses have no body, use GET for
      details)'
ec-version: ${EC_VERSION}
effective-time: "${TIMESTAMP}"
key: |
${__known_PUBLIC_KEY}
policy:
  publicKey: |
${____known_PUBLIC_KEY}
success: false

---

[Strict with failures:report - 1]
components:
- containerImage: ${REGISTRY}/acceptance/does-not-exist
  name: ""
  success: false
  violations:
  - metadata:
      code: builtin.image.accessible
      description: The image URL is available and accessible on a public registry.
      title: Image URL is accessible
    msg: 'Image URL is not accessible: HEAD http://${REGISTRY}/v2/acceptance/does-not-exist/manifests/latest:
      unexpected status code 404 Not Found (HEAD responses have no body, use GET for
      details)'
ec-version: ${EC_VERSION}
effective-time: "${TIMESTAMP}"
key: |
${__known_PUBLIC_KEY}
policy:
  publicKey: |
${____known_PUBLIC_KEY}
success: false

---

[Non strict with warnings:report - 1]
components:
- attestations:
  - predicateBuildType: https://tekton.dev/attestations/chains/pipelinerun@v2
    predicateType: https://slsa.dev/provenance/v0.2
    signatures:
    - keyid: ""
      sig: ${ATTESTATION_SIGNATURE_acceptance/non-strict-with-warnings}
    type: https://in-toto.io/Statement/v0.1
  containerImage: ${REGISTRY}/acceptance/non-strict-with-warnings@${REGISTRY_acceptance/non-strict-with-warnings:latest_HASH}
  name: ""
  signatures:
  - keyid: ""
    sig: ${IMAGE_SIGNATURE_acceptance/non-strict-with-warnings}
  success: true
  successes:
  - metadata:
      code: builtin.attestation.signature_check
      description: The attestation signature matches the provided public key.
      title: Attestation signature check passed
    msg: Pass
  - metadata:
      code: builtin.attestation.syntax_check
      description: The attestation has correct syntax.
      title: Attestation syntax check passed
    msg: Pass
  - metadata:
      code: builtin.image.signature_check
      description: The image signature matches the provided public key.
      title: Image signature check passed
    msg: Pass
  warnings:
  - metadata:
      code: test.no_skipped_tests
      depends_on:
      - test.test_data_found
      description: Reports any test that has its result set to "SKIPPED".
      solution: There is a test that was skipped. Make sure that each task with a
        result named 'TEST_OUTPUT' was not skipped. You can find which test was skipped
        by examining the 'result' key in the 'TEST_OUTPUT'.
      term: skipped
      title: No tests were skipped
    msg: Test "skipped" was skipped
ec-version: ${EC_VERSION}
effective-time: "${TIMESTAMP}"
key: |
${__known_PUBLIC_KEY}
policy:
  configuration:
    include:
    - test.no_skipped_tests
  publicKey: |
${____known_PUBLIC_KEY}
  sources:
  - policy:
    - github.com/enterprise-contract/ec-policies//policy
success: true

---

[Strict with warnings:report - 1]
components:
- attestations:
  - predicateBuildType: https://tekton.dev/attestations/chains/pipelinerun@v2
    predicateType: https://slsa.dev/provenance/v0.2
    signatures:
    - keyid: ""
      sig: ${ATTESTATION_SIGNATURE_acceptance/strict-with-warnings}
    type: https://in-toto.io/Statement/v0.1
  containerImage: ${REGISTRY}/acceptance/strict-with-warnings@${REGISTRY_acceptance/strict-with-warnings:latest_HASH}
  name: ""
  signatures:
  - keyid: ""
    sig: ${IMAGE_SIGNATURE_acceptance/strict-with-warnings}
  success: true
  successes:
  - metadata:
      code: builtin.attestation.signature_check
      description: The attestation signature matches the provided public key.
      title: Attestation signature check passed
    msg: Pass
  - metadata:
      code: builtin.attestation.syntax_check
      description: The attestation has correct syntax.
      title: Attestation syntax check passed
    msg: Pass
  - metadata:
      code: builtin.image.signature_check
      description: The image signature matches the provided public key.
      title: Image signature check passed
    msg: Pass
  warnings:
  - metadata:
      code: test.no_skipped_tests
      depends_on:
      - test.test_data_found
      description: Reports any test that has its result set to "SKIPPED".
      solution: There is a test that was skipped. Make sure that each task with a
        result named 'TEST_OUTPUT' was not skipped. You can find which test was skipped
        by examining the 'result' key in the 'TEST_OUTPUT'.
      term: skipped
      title: No tests were skipped
    msg: Test "skipped" was skipped
ec-version: ${EC_VERSION}
effective-time: "${TIMESTAMP}"
key: |
${__known_PUBLIC_KEY}
policy:
  configuration:
    include:
    - test.no_skipped_tests
  publicKey: |
${____known_PUBLIC_KEY}
  sources:
  - policy:
    - github.com/enterprise-contract/ec-policies//policy
success: true

---

[Golden container image:report - 1]
components:
- attestations:
  - predicateBuildType: tekton.dev/v1beta1/TaskRun
    predicateType: https://slsa.dev/provenance/v0.2
    signatures:
    - keyid: SHA256:RHajkr+wMEtGfT2CRFrQEhg/8MY2bDLXVg3F8IuI5nE
      sig: MEUCIHFVZeVR59n9UvN1dwF9Lh3Gv8XWLPDPIIJcnQ8e3TtvAiEA0z/5v6ggvmQyQ1EnYTJo9rwxOYuve4th4P/0639orLg=
    type: https://in-toto.io/Statement/v0.1
  - predicateBuildType: tekton.dev/v1beta1/PipelineRun
    predicateType: https://slsa.dev/provenance/v0.2
    signatures:
    - keyid: SHA256:RHajkr+wMEtGfT2CRFrQEhg/8MY2bDLXVg3F8IuI5nE
      sig: MEUCIQClx1zvZGvyRu5gCHiC+oWVZTmWJGQlocSZMnzx/5omZAIgUiLQuMm+USYE+H0PDn/xPSVVQjkhWjDc3fulkxVzlC0=
    type: https://in-toto.io/Statement/v0.1
  - predicateBuildType: tekton.dev/v1beta1/PipelineRun
    predicateType: https://slsa.dev/provenance/v0.2
    signatures:
    - keyid: SHA256:RHajkr+wMEtGfT2CRFrQEhg/8MY2bDLXVg3F8IuI5nE
      sig: MEUCIGS176zN5aoorLQMukjoCkHm7ocu7UhnKXLhzEdsgp4BAiEAviub3Lf4thLmSTU6ZqnEjw02kkrb9LKBBa1t8hVgAM4=
    type: https://in-toto.io/Statement/v0.1
  containerImage: quay.io/hacbs-contract-demo/golden-container@sha256:e76a4ae9dd8a52a0d191fd34ca133af5b4f2609536d32200a4a40a09fdc93a0d
  name: ""
  signatures:
  - keyid: ""
    sig: MEUCIFPod1d9HhGt+TEQPG4j+LINjkifCFFOFrE4jbkvexGGAiEAqSp3ROZUsIOwWro6Tv+lRiR7sdMR0U6Crs1ISuQhHtA=
  success: true
  successes:
  - metadata:
      code: builtin.attestation.signature_check
      description: The attestation signature matches the provided public key.
      title: Attestation signature check passed
    msg: Pass
  - metadata:
      code: builtin.attestation.syntax_check
      description: The attestation has correct syntax.
      title: Attestation syntax check passed
    msg: Pass
  - metadata:
      code: builtin.image.signature_check
      description: The image signature matches the provided public key.
      title: Image signature check passed
    msg: Pass
  - metadata:
      code: slsa_provenance_available.attestation_predicate_type_accepted
      collections:
      - minimal
      - slsa1
      - slsa2
      - slsa3
      depends_on:
      - attestation_type.known_attestation_type
      description: The predicateType field of the attestation must indicate the in-toto
        SLSA Provenance format was used to attest the PipelineRun.
      title: Expected attestation predicate type found
    msg: Pass
ec-version: ${EC_VERSION}
effective-time: "${TIMESTAMP}"
key: |
  -----BEGIN PUBLIC KEY-----
  MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAERhr8Zj4dZW67zucg8fDr11M4lmRp
  zN6SIcIjkvH39siYg1DkCoa2h2xMUZ10ecbM3/ECqvBV55YwQ2rcIEa7XQ==
  -----END PUBLIC KEY-----
policy:
  configuration:
    include:
    - slsa_provenance_available
  publicKey: |-
    -----BEGIN PUBLIC KEY-----
    MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAERhr8Zj4dZW67zucg8fDr11M4lmRp
    zN6SIcIjkvH39siYg1DkCoa2h2xMUZ10ecbM3/ECqvBV55YwQ2rcIEa7XQ==
    -----END PUBLIC KEY-----
  sources:
  - policy:
    - github.com/enterprise-contract/ec-policies//policy
success: true

---

[Initialize TUF fails:report - 1]
${TIMESTAMP} Skipping step because a previous step failed

---

[Initialize TUF fails:initialize-tuf - 1]
Initializing TUF root...
Error: Get "http://tuf.invalid/root.json": dial tcp: lookup tuf.invalid on 10.96.0.10:53: no such host
main.go:74: error during command execution: Get "http://tuf.invalid/root.json": dial tcp: lookup tuf.invalid on 10.96.0.10:53: no such host

---

[Initialize TUF succeeds:report - 1]
components:
- attestations:
  - predicateBuildType: tekton.dev/v1beta1/TaskRun
    predicateType: https://slsa.dev/provenance/v0.2
    signatures:
    - keyid: SHA256:RHajkr+wMEtGfT2CRFrQEhg/8MY2bDLXVg3F8IuI5nE
      sig: MEUCIHFVZeVR59n9UvN1dwF9Lh3Gv8XWLPDPIIJcnQ8e3TtvAiEA0z/5v6ggvmQyQ1EnYTJo9rwxOYuve4th4P/0639orLg=
    type: https://in-toto.io/Statement/v0.1
  - predicateBuildType: tekton.dev/v1beta1/PipelineRun
    predicateType: https://slsa.dev/provenance/v0.2
    signatures:
    - keyid: SHA256:RHajkr+wMEtGfT2CRFrQEhg/8MY2bDLXVg3F8IuI5nE
      sig: MEUCIQClx1zvZGvyRu5gCHiC+oWVZTmWJGQlocSZMnzx/5omZAIgUiLQuMm+USYE+H0PDn/xPSVVQjkhWjDc3fulkxVzlC0=
    type: https://in-toto.io/Statement/v0.1
  - predicateBuildType: tekton.dev/v1beta1/PipelineRun
    predicateType: https://slsa.dev/provenance/v0.2
    signatures:
    - keyid: SHA256:RHajkr+wMEtGfT2CRFrQEhg/8MY2bDLXVg3F8IuI5nE
      sig: MEUCIGS176zN5aoorLQMukjoCkHm7ocu7UhnKXLhzEdsgp4BAiEAviub3Lf4thLmSTU6ZqnEjw02kkrb9LKBBa1t8hVgAM4=
    type: https://in-toto.io/Statement/v0.1
  containerImage: quay.io/hacbs-contract-demo/golden-container@sha256:e76a4ae9dd8a52a0d191fd34ca133af5b4f2609536d32200a4a40a09fdc93a0d
  name: ""
  signatures:
  - keyid: ""
    sig: MEUCIFPod1d9HhGt+TEQPG4j+LINjkifCFFOFrE4jbkvexGGAiEAqSp3ROZUsIOwWro6Tv+lRiR7sdMR0U6Crs1ISuQhHtA=
  success: true
  successes:
  - metadata:
      code: builtin.attestation.signature_check
      description: The attestation signature matches the provided public key.
      title: Attestation signature check passed
    msg: Pass
  - metadata:
      code: builtin.attestation.syntax_check
      description: The attestation has correct syntax.
      title: Attestation syntax check passed
    msg: Pass
  - metadata:
      code: builtin.image.signature_check
      description: The image signature matches the provided public key.
      title: Image signature check passed
    msg: Pass
  - metadata:
      code: slsa_provenance_available.attestation_predicate_type_accepted
      collections:
      - minimal
      - slsa1
      - slsa2
      - slsa3
      depends_on:
      - attestation_type.known_attestation_type
      description: The predicateType field of the attestation must indicate the in-toto
        SLSA Provenance format was used to attest the PipelineRun.
      title: Expected attestation predicate type found
    msg: Pass
ec-version: ${EC_VERSION}
effective-time: "${TIMESTAMP}"
key: |
  -----BEGIN PUBLIC KEY-----
  MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAERhr8Zj4dZW67zucg8fDr11M4lmRp
  zN6SIcIjkvH39siYg1DkCoa2h2xMUZ10ecbM3/ECqvBV55YwQ2rcIEa7XQ==
  -----END PUBLIC KEY-----
policy:
  configuration:
    include:
    - slsa_provenance_available
  publicKey: |-
    -----BEGIN PUBLIC KEY-----
    MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAERhr8Zj4dZW67zucg8fDr11M4lmRp
    zN6SIcIjkvH39siYg1DkCoa2h2xMUZ10ecbM3/ECqvBV55YwQ2rcIEa7XQ==
    -----END PUBLIC KEY-----
  sources:
  - policy:
    - github.com/enterprise-contract/ec-policies//policy
success: true

---

[Initialize TUF succeeds:initialize-tuf - 1]
TUF_MIRROR not set. Skipping TUF root initialization.

---

[Initialize TUF fails:results - 1]
{}
---

[Strict with failures:results - 1]
{}
---

[Non strict with failures:results - 1]
{
  "TEST_OUTPUT": "{\"timestamp\":\"${TIMESTAMP}\",\"namespace\":\"\",\"successes\":0,\"failures\":1,\"warnings\":0,\"result\":\"FAILURE\"}"
}
---

[Strict with warnings:results - 1]
{
  "TEST_OUTPUT": "{\"timestamp\":\"${TIMESTAMP}\",\"namespace\":\"\",\"successes\":1,\"failures\":0,\"warnings\":1,\"result\":\"WARNING\"}"
}
---

[Non strict with warnings:results - 1]
{
  "TEST_OUTPUT": "{\"timestamp\":\"${TIMESTAMP}\",\"namespace\":\"\",\"successes\":1,\"failures\":0,\"warnings\":1,\"result\":\"WARNING\"}"
}
---

[Golden container image:results - 1]
{
  "TEST_OUTPUT": "{\"timestamp\":\"${TIMESTAMP}\",\"namespace\":\"\",\"successes\":1,\"failures\":0,\"warnings\":0,\"result\":\"SUCCESS\"}"
}
---

[Initialize TUF succeeds:results - 1]
{
  "TEST_OUTPUT": "{\"timestamp\":\"${TIMESTAMP}\",\"namespace\":\"\",\"successes\":1,\"failures\":0,\"warnings\":0,\"result\":\"SUCCESS\"}"
}
---
